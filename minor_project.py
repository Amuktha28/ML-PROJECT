# -*- coding: utf-8 -*-
"""MINOR PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RJhVrnWkB0i250mzYZDntyfELccb7Br8
"""

#LOGISTIC REGRESSION
import pandas as pd
import seaborn as sns
df=pd.read_csv("/content/train.csv")
df

"""DATA VISULIZATION"""

df.info()

sns.set()
sns.countplot('Survived',data=df)

sns.countplot(x='Survived',hue='Sex',data=df,palette='cool')

sns.countplot('Sex',data=df)

sns.countplot('Age',data=df)

sns.countplot('Pclass',data=df)

sns.countplot('Cabin',data=df)

"""MISSING VALUES

As missing values in Age and cabin columns we cannot use it although being correct reference
"""

df.isnull().sum()

df=df.drop(['Age','Cabin'],axis=1)
df

import pandas as pd
sex=pd.get_dummies(df['Sex'])
sex
#one hot encoding

df=pd.concat([df,sex],axis=1)
df

df.shape

df['Survived'].value_counts()

df.info()

import matplotlib.pyplot as plt
x=df.iloc[:,[2,11]].values
y=df.iloc[:,1].values

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0)

from sklearn.linear_model import LogisticRegression
model=LogisticRegression()
model

model.fit(x_train,y_train)

y_pred=model.predict(x_test)
y_pred

y_test

"""y_test is approx equal to y_pred"""

import numpy as np
from sklearn.preprocessing import MinMaxScaler 
Scale=MinMaxScaler()
x_train=Scale.fit_transform(x_train)
x_test=Scale.transform(x_test)

np.unique(y_test,return_counts=True)
np.unique(y_pred,return_counts=True)

from sklearn.metrics import r2_score
r2_score(y_pred,y_pred)

r2_score(y_test,y_pred)#because of less data set

"""ACCURACY OF ML MODEL"""

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

precision=115/(115+24)
precision

recall=115/(115+25)
recall

f1_score=2*((precision*recall)/(precision+recall))
f1_score

"""linear regression plot using seaborn

"""

import pandas as pd
df1=pd.DataFrame({"Actual":y_test,'predicted':y_pred})
import seaborn as sns
sns.regplot(x='Actual',y='predicted',data=df1,color='red')
plt.figure(figsize=(19,8))
plt.show()

myvar_list = df["PassengerId"].tolist()
res=list(zip(myvar_list,y_pred))
from tabulate import tabulate
x=tabulate(res,headers=['PASSENGERSID','SURVIVAL'],tablefmt='grid')
print(x)

sns.countplot(y_pred)#survived